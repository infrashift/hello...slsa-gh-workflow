name: 'PR Scan: CVE Policy Check'

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]

permissions:
  contents: read

jobs:
  security-checks:
    name: 'Runtime Security and Policy Checks'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout PR Code'
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build Container Image Locally'
        uses: docker/build-push-action@v5
        with:
          load: true
          tags: pr-scan-image:latest
          file: ./Containerfile

      - name: 'Check for Root User at Runtime'
        continue-on-error: true # This allows the job to continue on failure
        run: |
          echo "Verifying container runs as non-root user..."
          # Execute 'id -u' inside the container to get the user ID.
          USER_ID=$(docker run --rm pr-scan-image:latest id -u)
          
          echo "Container UID is: $USER_ID"
          if [ "$USER_ID" = "0" ]; then
            echo "❌ Policy Check Failed: Container must not run as root (UID 0)."
            exit 1
          else
            echo "✅ Policy Check Passed: Container runs as a non-root user."
          fi

      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 'Install Testinfra'
        run: |
          # Pin both pytest and testinfra to specific, known-stable versions
          # to prevent OS auto-detection bugs in the CI environment.
          pip install pytest==8.4.1 testinfra
          
      - name: 'Run Testinfra against the container'
        continue-on-error: true # This allows the job to continue on failure
        run: |
          # Update the path to point to the new test file.
          pytest --hosts=docker://pr-scan-image:latest tests/test_container.py

      - name: 'Install Anchore Grype'
        uses: anchore/scan-action/download-grype@v3

      - name: 'Run CVE Scan with Grype'
        run: grype pr-scan-image:latest -o json > cve-report.json

      - name: 'Upload CVE Report as Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: cve-report
          path: cve-report.json

      - name: 'Install OPA'
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.66.0/opa_linux_amd64_static
          chmod +x ./opa

      - name: 'Evaluate CVE report against OPA policy'
        run: |
          echo "Evaluating policy: deny if High or Critical CVEs exist..."

          # First, ask OPA for the set of violation messages.
          VIOLATIONS_RESULT=$(./opa eval \
            --data .github/policies/deny.rego \
            --input cve-report.json \
            "data.grype.authz.violations")
          
          # Next, use jq to extract just the array of violation messages from OPA's JSON output.
          VIOLATIONS_ARRAY=$(echo "$VIOLATIONS_RESULT" | jq '.result[0].expressions[0].value')

          # Now, check if the length of the violation array is greater than zero.
          if [ "$(echo "$VIOLATIONS_ARRAY" | jq 'length')" -gt 0 ]; then
            # This block runs if the violations array is NOT empty.
            echo "❌ OPA Policy Check Failed! Found High or Critical CVEs."
            echo "Found violations:"
            # Pretty-print each violation from the array.
            echo "$VIOLATIONS_ARRAY" | jq --raw-output '.[]'
            exit 1
          else
            # This block runs if the violations array is empty.
            echo "✅ OPA Policy Check Passed. No High or Critical CVEs found."
          fi
